{"ast":null,"code":"var _jsxFileName = \"/var/www/html/editor-demo/tool/src/components/TranslationTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { GrNext, GrPrevious } from \"react-icons/gr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TranslationTable = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [isActiveRow, setIsActiveRow] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage] = useState(10);\n  const [textInput, setTextInput] = useState(\"\");\n  useEffect(() => {\n    const getData = () => {\n      fetch(\"http://localhost:4003/employees\", {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json '\n        }\n      }).then(response => {\n        response.json().then(result => {\n          setData(result.rows);\n        });\n      });\n    };\n\n    getData();\n  }, []);\n\n  const isActive = () => {\n    setIsActiveRow(!isActiveRow);\n  }; // Get current postssetCurrentPage\n\n\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n  const currentRow = data.slice(indexOfFirstRow, indexOfLastRow); //pagination\n\n  const pageNumbers = [];\n  const totalRows = data.length;\n  const totalPages = Math.ceil(totalRows / rowsPerPage);\n\n  for (let i = 1; i <= totalPages; i++) {\n    pageNumbers.push(i);\n  } //change page \n\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  let previous = () => {\n    if (currentPage < totalRows && currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  let next = () => {\n    if (currentPage < totalRows && currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handleClick = () => {\n    console.log(textInput);\n    fetch(\"http://localhost:4003/employees/\" + selectedRow.sentance_id, {\n      method: 'PATCH',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json '\n      },\n      body: JSON.stringify({\n        \"sentance_id\": selectedRow.sentance_id,\n        \"source_lang\": selectedRow.source_lang,\n        \"target_lang\": textInput,\n        \"sugestions\": selectedRow.sugestions,\n        \"page_no\": selectedRow.page_no\n      })\n    }).then(res => {\n      res.json().then(result => {\n        console.log(result);\n        alert(\"Target Language is Updated.\");\n      });\n    });\n  };\n\n  const handleChange = event => {\n    setTextInput(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-page mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex alig-items-center justify-content-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-section\",\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            bordered: true,\n            hover: true,\n            className: \"edit-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"English Language\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Arabic Language\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: currentRow.map((item, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: `segment ${(selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.sentance_id) === item.sentance_id ? 'active' : ''}`,\n                onClick: key => {\n                  setSelectedRow(item);\n                  isActive();\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `segment-num ${(selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.sentance_id) === item.sentance_id ? 'active-num' : ''}`,\n                  children: item.sentance_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.source_lang\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"target-lang\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 27\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"paginate\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: previous,\n              children: /*#__PURE__*/_jsxDEV(GrPrevious, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this), \"Page \", currentPage, \" of \", totalPages, /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: next,\n              children: /*#__PURE__*/_jsxDEV(GrNext, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              type: \"submit\",\n              onClick: handleClick,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" suggestion-section ml-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              bordered: true,\n              hover: true,\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"th\", {\n                    colSpan: \"2\",\n                    children: \"Translation Result\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"suggestion\",\n                      children: selectedRow && selectedRow.sugestions\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 77\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TranslationTable, \"j+OqbX63CfTCOlrSfmQTKRTNhEE=\");\n\n_c = TranslationTable;\nexport default TranslationTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslationTable\");","map":{"version":3,"sources":["/var/www/html/editor-demo/tool/src/components/TranslationTable.js"],"names":["React","useState","useEffect","Table","GrNext","GrPrevious","TranslationTable","props","data","setData","selectedRow","setSelectedRow","isActiveRow","setIsActiveRow","currentPage","setCurrentPage","rowsPerPage","textInput","setTextInput","getData","fetch","method","headers","then","response","json","result","rows","isActive","indexOfLastRow","indexOfFirstRow","currentRow","slice","pageNumbers","totalRows","length","totalPages","Math","ceil","i","push","paginate","pageNumber","previous","next","handleClick","console","log","sentance_id","body","JSON","stringify","source_lang","sugestions","page_no","res","alert","handleChange","event","target","value","map","item","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport { GrNext, GrPrevious } from \"react-icons/gr\";\nconst TranslationTable = (props) => {\n\n  const [data, setData] = useState([]);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [isActiveRow, setIsActiveRow] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage] = useState(10);\n  const [textInput, setTextInput] = useState(\"\");\n  \n\n  useEffect(() => {\n    const getData = () => {\n      fetch(\"http://localhost:4003/employees\", {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json '\n        }\n      }).then((response) => {\n        response.json().then((result) => {\n          setData(result.rows)\n        })\n      })\n    }\n\n    getData();\n  }, []);\n\n\n  const isActive = () => {\n    setIsActiveRow(!isActiveRow)\n  }\n\n\n  // Get current postssetCurrentPage\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n  const currentRow = data.slice(indexOfFirstRow, indexOfLastRow);\n\n  //pagination\n  const pageNumbers = [];\n  const totalRows = data.length;\n  const totalPages = Math.ceil(totalRows / rowsPerPage)\n\n\n\n  for (let i = 1; i <= totalPages; i++) {\n    pageNumbers.push(i);\n  }\n  //change page \n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  }\n\n\n  let previous = () => {\n    if (currentPage < totalRows && currentPage > 1) {\n      setCurrentPage(currentPage - 1)\n    } \n  }\n\n  let next = () => {\n    if (currentPage < totalRows && currentPage < totalPages) {\n      setCurrentPage(currentPage + 1)\n\n    }\n  }\n  const handleClick = () => {\n    console.log(textInput);\n    \n    fetch(\"http://localhost:4003/employees/\"+ selectedRow.sentance_id, {\n      method: 'PATCH',\n      \n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json '\n      },\n      body: JSON.stringify({\n        \"sentance_id\": selectedRow.sentance_id,\n        \"source_lang\": selectedRow.source_lang,\n        \"target_lang\": textInput,\n        \"sugestions\": selectedRow.sugestions,\n        \"page_no\": selectedRow.page_no\n      }),\n     \n      }).then((res)=>{\n        res.json().then((result)=>{\n          console.log(result)\n          alert(\"Target Language is Updated.\")\n        })\n      })\n      \n  }\n\n  const handleChange = (event) => {\n    setTextInput(event.target.value);\n  }\n\n  return (\n    <div className=\"list\">\n      {\n        data ?\n          <div className=\"editor-page mt-5\">\n\n            <div className=\"d-flex alig-items-center justify-content-between\">\n              <div className=\"edit-section\">\n\n                <Table bordered hover className=\"edit-table\">\n                  <thead>\n                    <tr className=\"\">\n                      <th>#</th>\n                      <th>English Language</th>\n                      <th>Arabic Language</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n\n                    {\n                      currentRow.map((item, i) =>\n                        <tr key={i} className={`segment ${selectedRow?.sentance_id === item.sentance_id ? 'active' : ''}`} onClick={(key) => {\n                          setSelectedRow(item);\n                          isActive();\n                        }\n                        }\n                        >\n\n                          <td className={`segment-num ${selectedRow?.sentance_id === item.sentance_id ? 'active-num' : ''}`}>{item.sentance_id}</td>\n                          <td>{item.source_lang}</td>\n                          <td className=\"target-lang\">\n                            <div>\n                              <input type=\"text\" onChange={handleChange}\n                              />\n                            </div>\n                          </td>\n\n                        </tr>\n                      )\n                    }\n\n                  </tbody>\n\n                </Table>\n\n                {/* <Pagination rowPerPage={rowsPerPage} totalRows={data.length} paginate={paginate} /> */}\n\n\n                <div className=\"paginate\">\n                  <span onClick={previous}><GrPrevious /></span>\n                  Page {currentPage} of {totalPages}\n                  <span onClick={next}><GrNext /></span>\n\n                  <button className=\"btn btn-primary\" type=\"submit\" onClick={handleClick}>Save</button>\n                </div>\n\n              </div>\n              <div className=\" suggestion-section ml-0\" >\n                <div>\n                  <Table bordered hover >\n                    <thead>\n                      <tr>\n                        <th colSpan=\"2\">Translation Result</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>\n                          <div className=\"suggestion\">{selectedRow && selectedRow.sugestions}</div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </div>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"d-flex align-items-center justify-content-center\"><p>Loading...</p></div>\n      }\n\n    </div>\n  )\n\n}\nexport default TranslationTable;\n\n\n\n"]},"metadata":{},"sourceType":"module"}